name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:

jobs:
  test-backend: 
    runs-on: ubuntu-24.04
    environment: env
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn clean verify --file simple-api/pom.xml

      - name: Run SonarCloud analysis
        working-directory: ./simple-api
        run: |
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=AntoineCmbld_tp-devops-correction-docker \
            -Dsonar.organization=antoinecmbld \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  build-and-push-docker-image:
    needs: test-backend
    runs-on: ubuntu-24.04
    environment: env
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: ./simple-api
          tags: ${{ secrets.DOCKER_USERNAME }}/simple-api:latest
          push: true

      - name: Build & Push database
        uses: docker/build-push-action@v6
        with:
          context: ./database
          tags: ${{ secrets.DOCKER_USERNAME }}/database:latest
          push: true

      - name: Build & Push http-server
        uses: docker/build-push-action@v6
        with:
          context: ./http-server
          tags: ${{ secrets.DOCKER_USERNAME }}/http-server:latest
          push: true

  deploy:
  name: Deploy to Server
  needs: build-and-push-docker-image
  runs-on: ubuntu-latest
  environment: env
  if: github.ref == 'refs/heads/main'

  steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy containers over SSH
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF

          docker network create my_app_network || true

          # Write environment variables to file securely
          cat <<EOT > /home/admin/db.env
          POSTGRES_DB=$DB_NAME
          POSTGRES_USER=$DB_USER
          POSTGRES_PASSWORD=$DB_PASSWORD
          EOT

          # Start PostgreSQL container
          docker rm -f db || true
          docker pull antoinecmbld/database:latest
          docker run -d \
            --name db \
            --env-file /home/admin/db.env \
            --network my_app_network \
            --restart always \
            antoinecmbld/database:latest

          # Start backend container
          docker rm -f simple-api || true
          docker pull antoinecmbld/simple-api:latest
          docker run -d \
            --name simple-api \
            --network my_app_network \
            -e DATABASE_HOST=db \
            -e DATABASE_PASSWORD=$DB_PASSWORD \
            --restart always \
            antoinecmbld/simple-api:latest

          # Copy Apache config and start proxy (as before)
          # ...

        EOF
